{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "IPL_Analysis.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyMieT47/L5qR6X4rWoX6MIO",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tejasnikumbh999/IPL_Data_Analysis/blob/main/IPL_Analysis.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#IPL Data Analysis Application"
      ],
      "metadata": {
        "id": "XVsUQs-pqXRY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import dash\n",
        "from dash import dcc\n",
        "from dash import html\n",
        "import plotly.express as px\n",
        "import pandas as pd\n",
        "from dash.dependencies import Input, Output\n",
        " \n",
        "#load data\n",
        "\n",
        "df = pd.read_csv('https://raw.githubusercontent.com/srinathkr07/IPL-Data-Analysis/master/matches.csv')\n",
        "df=df.drop(columns='id')                                                        #Drop irrelevant columns\n",
        "#Data cleaning and pre processing\n",
        "df=df.fillna(0)\n",
        "mappings={'Rising Pune Supergiant':'Rising Pune Supergiants','Delhi Capitals':'Delhi Daredevils'}\n",
        "df['team1']=df['team1'].replace(mappings)\n",
        "df['team2']=df['team2'].replace(mappings)\n",
        "df['winner']=df['winner'].replace(mappings)\n",
        "df['toss_winner']=df['toss_winner'].replace(mappings)\n",
        "\n",
        "#Column to identify the loosing team\n",
        "loser=[]\n",
        "for i in range(756):\n",
        "  if (df.iloc[i,3])!=(df.iloc[i,9]):\n",
        "    loser.append(df.iloc[i,3])\n",
        "  elif (df.iloc[i,9])==0:\n",
        "    loser.append(0)\n",
        "  else:\n",
        "    loser.append(df.iloc[i,4])\n",
        "df['Loser']=loser\n",
        "\n",
        "#Column to identify the matches played by each team\n",
        "total={}\n",
        "count=0\n",
        "for i in df['team1'].unique():\n",
        "  for m in range(756):\n",
        "    if i==df.iloc[m,3]:\n",
        "      count+=1\n",
        "    else:\n",
        "      if i==df.iloc[m,4]:\n",
        "        count+=1\n",
        "  total[i]=count\n",
        "  count=0\n",
        "\n",
        "#to create a new column of total matches played by the winner over all the seasons\n",
        "match=[]\n",
        "for i in df['winner']:\n",
        "  for j,k in total.items():\n",
        "    if i==j:\n",
        "      match.append(k)\n",
        "    elif i==0:\n",
        "      match.append(0)\n",
        "      break\n",
        "\n",
        "df['Total_matches_played_by_winner']=match\n",
        "\n",
        "#Replace the year of tournament by season\n",
        "df['season'].replace([ 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017,2018,2019],['Season 1','Season 2',\n",
        "    'Season 3','Season 4','Season 5','Season 6','Season 7','Season 8','Season 9','Season 10','Season 11','Season 12'],\n",
        "    inplace=True)\n",
        "#Drop the column with no winner\n",
        "df = df[df['winner'] != 0]\n",
        "df.dropna(inplace=True)\n",
        "\n",
        "app = dash.Dash(__name__)\n",
        "server=app.server\n",
        " \n",
        "#Create layout of app\n",
        "app.layout = html.Div([html.Div([\n",
        "    html.Audio(src='https://quz1yp-a.akamaihd.net/downloads/ringtones/files/mp3/ayogi-309.mp3',autoPlay=True,controls=True,\n",
        "              title='IPL Anthem',loop=True,style={'opacity':'30%'}),\n",
        "    html.Div([html.Img(src='https://i0.wp.com/www.uniquenewsonline.com/wp-content/uploads/2022/01/Tata-Ipl-Log.png?w=1280&ssl=1',\n",
        "              style={'height':'20%', 'width':'30%',\"border\":\"5px  white solid\",'borderRadius': '10px',})],\n",
        "              style={'class':'rotate','textAlign': 'center'}),\n",
        "    html.H1(children='Indian Premiur League (IPL) Dashboard',\n",
        "              style={\"color\": \"white\",'backgroundColor':'midnightblue','textAlign': 'center',\"border\":\"2px white solid\",\n",
        "            'borderRadius': '10px','overflow': 'hidden'}),\n",
        "    html.Br(),\n",
        "    \n",
        "    html.Div([dcc.Dropdown(['Best team based on Number of Wins','Best team based on Win by Runs',\n",
        "            'Best Team based on Win by Wickets','Best Player based on Player of the Match','Luckiest Venue for Each Team',\n",
        "            'Winning probability by Winning Toss'],'Best team based on Number of Wins',id='Condition',\n",
        "            style={'textAlign': 'center',\"font-weight\": \"bold\",'backgroundColor':'lightcyan'})]),\n",
        "    html.Br(),\n",
        "    \n",
        "    html.Div([dcc.RadioItems(['Overall','Season 1','Season 2','Season 3','Season 4','Season 5','Season 6','Season 7',\n",
        "            'Season 8','Season 9','Season 10','Season 11','Season 12'],'Overall',id='Season',inline=True)],\n",
        "             style = {\"font-weight\": \"bold\",'display': 'block', 'cursor': 'pointer','textAlign': 'center',\n",
        "            \"margin-right\": \"100px\",\"color\": \"black\"}),\n",
        "    html.Br(),\n",
        "    \n",
        "    html.Div([dcc.Graph(id='Display',)],style={'opacity':'80%'})]),\n",
        "    html.Br(),\n",
        "                       \n",
        "    html.H3(children='Created by : Tejas Nikumbh | Contact me : tejasnikumbh999@gmail.com',style={\"color\": \"white\",'backgroundColor':'#0d195a','textAlign': 'center',\n",
        "            \"border\":\"2px white solid\",'borderRadius': '10px','overflow': 'hidden'})],\n",
        "            style={\"color\": \"navy\",'background-image': 'url(\"https://www.freewalldownload.com/download/cricket-ball-wallpapers-for-mobile-free-download/\")',\n",
        "            'background-repeat': 'no-repeat','background-size': '1500px 1100px',\"border\":\"5px navy solid\",\n",
        "            'borderRadius': '10px','overflow': 'hidden'})\n",
        "\n",
        "@app.callback(\n",
        "    Output('Display','figure'),\n",
        "    [Input('Condition','value'),Input('Season','value')])\n",
        "\n",
        "def update_graph(Condition,Season):\n",
        "  if Condition=='Best team based on Number of Wins':\n",
        "    if Season=='Overall':\n",
        "      Best_team=px.pie(data_frame=df,names='winner',title='Best team based on Number of Wins',hole=0.3,hover_data=['Total_matches_played_by_winner'])\n",
        "      Best_team.update_traces(textinfo=\"label+value\",textposition='inside')\n",
        "      Best_team.update_layout(margin=dict(t=70, b=20, l=10, r=10))\n",
        "      Best_team.add_layout_image(dict(source=\"https://raw.githubusercontent.com/tejasnikumbh999/IPL_Analysis/main/Daco_4737816.png\",\n",
        "      xref=\"paper\", yref=\"paper\",x=0.532, y=0.387,sizex=0.22, sizey=0.22,xanchor=\"right\", yanchor=\"bottom\"))\n",
        "      return Best_team\n",
        "    else:\n",
        "      df1 = df[df['season'] == Season]\n",
        "      Best_team=px.pie(data_frame=df1,names='winner',title='Best team based on Number of Wins',hole=0.3)\n",
        "      Best_team.update_traces(textinfo=\"label+value\",textposition='inside')\n",
        "      Best_team.update_layout(margin=dict(t=70, b=20, l=10, r=10))\n",
        "      Best_team.add_layout_image(dict(source=\"https://raw.githubusercontent.com/tejasnikumbh999/IPL_Analysis/main/Daco_4737816.png\",\n",
        "      xref=\"paper\", yref=\"paper\",x=0.532, y=0.387,sizex=0.22, sizey=0.22,xanchor=\"right\", yanchor=\"bottom\"))\n",
        "      return Best_team\n",
        "        \n",
        "  elif Condition== 'Best team based on Win by Runs':\n",
        "    if Season=='Overall':\n",
        "      Win_run=px.scatter(df,x='winner',y='win_by_runs',color='Loser',size='win_by_runs',title='Best team based on Win by Runs')\n",
        "      Win_run.update_layout(margin=dict(t=70, b=20, l=10, r=10))\n",
        "      return Win_run\n",
        "    else:  \n",
        "      df1 = df[df['season'] == Season]\n",
        "      Win_run=px.scatter(df1,x='winner',y='win_by_runs',color='Loser',size='win_by_runs',title='Best team based on Win by Runs')\n",
        "      Win_run.update_layout(margin=dict(t=70, b=20, l=10, r=10))\n",
        "      return Win_run\n",
        "\n",
        "  elif Condition== 'Best Team based on Win by Wickets':\n",
        "    if Season=='Overall':\n",
        "      Win_Wick=px.scatter(df,x='winner',y='win_by_wickets',color='Loser',size='win_by_wickets',title='Best team based on Win by Wickets')\n",
        "      Win_Wick.update_layout(margin=dict(t=70, b=20, l=10, r=10))\n",
        "      return Win_Wick\n",
        "    else:\n",
        "      df2 = df[(df['season'] == Season) & (df[\"win_by_wickets\"]>0)]\n",
        "      Win_Wick=px.scatter(df2,x='winner',y='win_by_wickets',color='Loser',size='win_by_wickets',title='Best team based on Win by wickets')\n",
        "      Win_Wick.update_layout(margin=dict(t=70, b=20, l=10, r=10))\n",
        "      return Win_Wick\n",
        "        \n",
        "  elif Condition== 'Best Player based on Player of the Match':\n",
        "    if Season=='Overall':\n",
        "      Best_Player=px.histogram(df,x='player_of_match',color='player_of_match',title='Best Player based on Player of the Match')\n",
        "      Best_Player.update_layout(xaxis={'categoryorder':'total descending'},margin=dict(t=70, b=20, l=10, r=10))\n",
        "      return Best_Player\n",
        "    else:\n",
        "      df3 = df[df['season'] == Season]\n",
        "      Best_Player=px.histogram(df3,x='player_of_match',color='player_of_match',title='Best Player based on Player of the Match')\n",
        "      Best_Player.update_layout(xaxis={'categoryorder':'total descending'},margin=dict(t=70, b=20, l=10, r=10))\n",
        "      return Best_Player\n",
        "        \n",
        "  elif Condition== 'Luckiest Venue for Each Team':\n",
        "    if Season=='Overall':\n",
        "      Lucky_venue=px.histogram(df,x='venue',color='venue',title='Luckiest Venue for Each Team',animation_frame='winner',barmode='relative')\n",
        "      Lucky_venue.update_xaxes(showticklabels=False) # Hide x axis ticks \n",
        "      Lucky_venue.update_layout(xaxis={'categoryorder':'total descending'},margin=dict(t=70, b=20, l=10, r=10))\n",
        "      Lucky_venue['layout']['updatemenus'][0]['pad']=dict(r= 10, t= 10)\n",
        "      Lucky_venue['layout']['sliders'][0]['pad']=dict(r= 10, t= 20,)\n",
        "      return Lucky_venue\n",
        "    else:\n",
        "      df4 = df[df['season'] == Season]\n",
        "      Lucky_venue=px.histogram(df4,x='venue',color='venue',title='Luckiest Venue for Each Team',animation_frame='winner',barmode='relative')\n",
        "      Lucky_venue.update_xaxes(showticklabels=False) # Hide x axis ticks\n",
        "      Lucky_venue.update_layout(xaxis={'categoryorder':'total descending'},margin=dict(t=70, b=20, l=10, r=10),title={'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'})\n",
        "      Lucky_venue['layout']['updatemenus'][0]['pad']=dict(r= 10, t= 10)\n",
        "      Lucky_venue['layout']['sliders'][0]['pad']=dict(r= 10, t= 20,)\n",
        "      return Lucky_venue\n",
        "\n",
        "  elif Condition== 'Winning probability by Winning Toss':\n",
        "    if Season=='Overall':\n",
        "      Win_prob= px.sunburst(df, path=['toss_winner', 'winner','toss_decision'],title='Winning probability by Winning Toss')\n",
        "      Win_prob.update_layout(margin = dict(t=70, b=20, l=10, r=10))\n",
        "      Win_prob.update_traces(textinfo=\"label+percent parent+value\",insidetextorientation='radial')\n",
        "      return Win_prob\n",
        "    else:\n",
        "      df5 = df[df['season'] == Season]\n",
        "      Win_prob= px.sunburst(df5, path=['toss_winner', 'winner'],title='Winning probability by Winning Toss')\n",
        "      Win_prob.update_layout(margin = dict(t=70, b=20, l=10, r=10))\n",
        "      Win_prob.update_traces(textinfo=\"label+percent parent+value\",insidetextorientation='radial')\n",
        "      return Win_prob\n",
        "    \n",
        "if __name__ == '__main__':\n",
        "    app.run_server(debug='True')"
      ],
      "metadata": {
        "id": "Rr-teCoiY5qV"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
